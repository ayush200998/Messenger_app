{"version":3,"sources":["Message.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","prompt","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0TA0BeA,EAtBCC,sBAAW,WAAyBC,GAAS,IAA/BC,EAA8B,EAA9BA,QAEnBC,EAFiD,EAApBC,WAEPF,EAAQE,SAErC,OACI,qBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,gBAA/C,SACI,cAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,mBAAqB,oBAA/C,SACI,cAACI,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CACCC,MAAM,QACNC,QAAQ,KACRC,UAAU,KAHX,WAKMR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MALL,IAK4DF,EAAQA,oB,QCHzEU,EAZKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,2CACZC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,Y,+BCsERC,MAzEf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGmBF,mBAAS,CAAC,KAH7B,mBAGNG,EAHM,KAGIC,EAHJ,OAIoBJ,mBAAS,IAJ7B,mBAINpB,EAJM,KAIKyB,EAJL,KAwCb,OAjCAC,qBAAU,WACRD,EAAYE,OAAO,sBACjB,IAqBJD,qBAAU,WACRlB,EAAGoB,WAAW,YACbC,QAAQ,YAAc,QACtBC,YAAW,SAAAC,GACVP,EAAYO,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAKA,EAAIC,gBAE3C,IAKD,sBAAKlC,UAAU,MAAf,UAEI,iDACA,0CAAaD,KACf,sBAAMC,UAAU,WAAhB,SACE,eAACmC,EAAA,EAAD,CAAanC,UAAU,kBAAvB,UAEE,cAACoC,EAAA,EAAD,CAAOC,YAAY,iBAAiBrC,UAAU,YAAYsC,MAAOlB,EAAOmB,SAAU,SAACC,GAAD,OAAWnB,EAASmB,EAAMC,OAAOH,UAEnH,cAACI,EAAA,EAAD,CACC1C,UAAU,iBACV2C,UAAWvB,EACXf,QAAQ,YACRD,MAAM,UACNwC,KAAK,SACLC,QA5CW,SAACL,GACnBA,EAAMM,iBAEJvC,EAAGoB,WAAW,YAAYoB,IAAI,CAC5BlD,QAASuB,EACTrB,SAAUA,EACViD,UAAWxC,IAASS,UAAUgC,WAAWC,oBAE3C7B,EAAS,KA8BL,SAQE,cAAC,IAAD,WAIN,cAAC,IAAD,UAEIC,EAASU,KAAI,SAACnC,GAAD,OACZ,cAAC,EAAD,CAAiCE,SAAUA,EAAUF,QAASA,GAAhDA,EAAQmD,oBC9DlBG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1c471ce8.chunk.js","sourcesContent":["import React , { forwardRef } from 'react'\r\nimport {Card , CardContent , Typography} from '@material-ui/core'\r\nimport './Message.css'\r\n\r\nconst Message = forwardRef(({ message , username} , ref) => {\r\n    \r\n     const isUser = username === message.username\r\n\r\n    return (\r\n        <div ref={ref} className={`message ${isUser && 'message_user'}`}>\r\n            <Card className={isUser ? 'message_userCard' : 'message_guestCard'} >\r\n                <CardContent>\r\n                    <Typography\r\n                     color='white'\r\n                     variant='h5'\r\n                     component='h2'\r\n                    >\r\n                        {!isUser && `${message.username || 'Unknown user'}: `} {message.message}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n            \r\n    )\r\n})\r\n\r\nexport default Message\r\n","import firebase from 'firebase'\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyBCrlBEN1NPfRCnXvIy4CEOerLLutE8GoQ\",\r\n    authDomain: \"facebook-messenger-b37ea.firebaseapp.com\",\r\n    projectId: \"facebook-messenger-b37ea\",\r\n    storageBucket: \"facebook-messenger-b37ea.appspot.com\",\r\n    messagingSenderId: \"492623689693\",\r\n    appId: \"1:492623689693:web:9bf18b7feed6272612a834\",\r\n    measurementId: \"G-EET70M2M17\"\r\n})\r\n\r\nconst db = firebaseApp.firestore()\r\n\r\nexport default db\r\n\r\n","import React, { useState , useEffect } from 'react'\nimport {  FormControl, Input, IconButton } from '@material-ui/core'\nimport Message from './Message.js'\nimport db from './firebase'\nimport firebase from 'firebase'\nimport FlipMove  from 'react-flip-move'\nimport SendIcon from '@material-ui/icons/Send';\nimport './App.css';\n\nfunction App() {\n\n  const [input, setInput] = useState('')\n  const [messages, setMessages] = useState([{}])\n  const [username , setUsername] = useState('')\n\n  // For setting the username one time only.\n  useEffect(() => {\n    setUsername(prompt(\"Enter your name\"))\n  } , [])\n\n  \n  const sendMessage = (event) => {\n    event.preventDefault()\n\n      db.collection('messages').add({\n        message: input,\n        username: username,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      })\n      setInput('')\n    }\n\n    // useEffect for the database.\n  // 1. onSnapshot looks for a change in the document.\n  //    if(change){\n  //    onSnapshot() runs  \n  //    }\n\n  // 2. snapshot refers to the whole document of the message collection.\n  useEffect(() => {\n    db.collection('messages')\n    .orderBy('timestamp' , 'desc')\n    .onSnapshot(snapshot => { \n      setMessages(snapshot.docs.map(doc =>  doc.data() ))\n    })\n  }, [])\n\n  \n\n  return (\n    <div className=\"App\">\n      \n        <h1>Messenger Clone</h1>\n        <h2>Welcome {username}</h2>\n      <form className='app_form'>\n        <FormControl className='app_formControl'>\n          {/* <InputLabel>Enter text....</InputLabel> */}\n          <Input placeholder='Enter text....' className='app_input' value={input} onChange={(event) => setInput(event.target.value)} />\n\n          <IconButton\n           className='app_iconButton'\n           disabled={!input}\n           variant=\"contained\"\n           color=\"primary\"\n           type='submit'\n           onClick={sendMessage}\n          >\n            <SendIcon/>\n          </IconButton>\n        </FormControl>\n      </form>\n      <FlipMove>\n        {\n          messages.map((message) => (\n           <Message key={message.timestamp} username={username} message={message}/>\n          ))\n        }\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}